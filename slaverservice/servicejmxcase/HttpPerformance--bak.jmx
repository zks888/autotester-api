<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="HttpPerformance" enabled="true">
      <stringProp name="TestPlan.comments">Http接口性能测试</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="thread" elementType="Argument">
            <stringProp name="Argument.name">thread</stringProp>
            <stringProp name="Argument.value">${__P(thread,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loops" elementType="Argument">
            <stringProp name="Argument.name">loops</stringProp>
            <stringProp name="Argument.value">${__P(loops,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="caseid" elementType="Argument">
            <stringProp name="Argument.name">caseid</stringProp>
            <stringProp name="Argument.value">${__P(caseid,2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testplanid" elementType="Argument">
            <stringProp name="Argument.name">testplanid</stringProp>
            <stringProp name="Argument.value">${__P(testplanid,13)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="batchname" elementType="Argument">
            <stringProp name="Argument.name">batchname</stringProp>
            <stringProp name="Argument.value">${__P(batchname,vvvvvv1111111)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testclass" elementType="Argument">
            <stringProp name="Argument.name">testclass</stringProp>
            <stringProp name="Argument.value">${__P(testclass,retrySendSmsOrFindShortUrl)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testdeployunit" elementType="Argument">
            <stringProp name="Argument.name">testdeployunit</stringProp>
            <stringProp name="Argument.value">${__P(testdeployunit,marketingservice)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="slaverid" elementType="Argument">
            <stringProp name="Argument.name">slaverid</stringProp>
            <stringProp name="Argument.value">${__P(slaverid,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="batchid" elementType="Argument">
            <stringProp name="Argument.name">batchid</stringProp>
            <stringProp name="Argument.value">${__P(batchid,25)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="casereportfolder" elementType="Argument">
            <stringProp name="Argument.name">casereportfolder</stringProp>
            <stringProp name="Argument.value">${__P(casereportfolder,/Users/fanseasn/Desktop/testresult/13-2-vvvvvv1111111)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysqlurl" elementType="Argument">
            <stringProp name="Argument.name">mysqlurl</stringProp>
            <stringProp name="Argument.value">${__P(mysqlurl,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysqlusername" elementType="Argument">
            <stringProp name="Argument.name">mysqlusername</stringProp>
            <stringProp name="Argument.value">${__P(mysqlusername,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mysqlpassword" elementType="Argument">
            <stringProp name="Argument.name">mysqlpassword</stringProp>
            <stringProp name="Argument.value">${__P(mysqlpassword,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库连接配置" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">testcenter</stringProp>
        <stringProp name="dbUrl">${mysqlurl}</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${mysqlpassword}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${mysqlusername}</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="前置条件线程" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取用例sql" enabled="true">
          <stringProp name="dataSource">testcenter</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select * from apicases where id=${caseid}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">testcaseresult</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取casetype" enabled="true">
          <stringProp name="BeanShellSampler.query"> 
String casetype=&quot;&quot;;
String apiid=&quot;&quot;;
 if(vars.getObject(&quot;testcaseresult&quot;).size()&gt;0)
 {
 	casetype=vars.getObject(&quot;testcaseresult&quot;).get(0).get(&quot;casetype&quot;);
 	apiid=vars.getObject(&quot;testcaseresult&quot;).get(0).get(&quot;apiid&quot;).toString();
 }
 vars.put(&quot;casetype&quot;,casetype);
 vars.put(&quot;apiid&quot;,apiid);
 log.error(&quot;===apiid-------------------------------------&quot;+apiid);
 props.setProperty(&quot;casetype&quot;,casetype);
 log.error(&quot;===casetype-------------------------------------&quot;+casetype);











</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="处理前置条件" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="testplanid" elementType="Argument">
                <stringProp name="Argument.name">testplanid</stringProp>
                <stringProp name="Argument.value">${testplanid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="caseid" elementType="Argument">
                <stringProp name="Argument.name">caseid</stringProp>
                <stringProp name="Argument.value">${caseid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="batchid" elementType="Argument">
                <stringProp name="Argument.name">batchid</stringProp>
                <stringProp name="Argument.value">${batchid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="slaverid" elementType="Argument">
                <stringProp name="Argument.name">slaverid</stringProp>
                <stringProp name="Argument.value">${slaverid}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="batchname" elementType="Argument">
                <stringProp name="Argument.name">batchname</stringProp>
                <stringProp name="Argument.value">${batchname}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="casetype" elementType="Argument">
                <stringProp name="Argument.name">casetype</stringProp>
                <stringProp name="Argument.value">${casetype}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mysqlurl" elementType="Argument">
                <stringProp name="Argument.name">mysqlurl</stringProp>
                <stringProp name="Argument.value">${mysqlurl}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mysqlusername" elementType="Argument">
                <stringProp name="Argument.name">mysqlusername</stringProp>
                <stringProp name="Argument.value">${mysqlusername}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mysqlpassword" elementType="Argument">
                <stringProp name="Argument.name">mysqlpassword</stringProp>
                <stringProp name="Argument.value">${mysqlpassword}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.api.autotest.core.precondition</stringProp>
        </JavaSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取前置条件结果sql" enabled="true">
          <stringProp name="dataSource">testcenter</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select status from apicases_condition_report where testplanid=${testplanid} and caseid =${caseid} and batchid=${batchid} and conditiontype=&apos;前置&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable">caseconditionresult</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取条件状态" enabled="true">
          <stringProp name="BeanShellSampler.query">
String status=vars.getObject(&quot;caseconditionresult&quot;).get(0).get(&quot;status&quot;);
log.error(&quot;===status=========================================================&quot;+status);

vars.put(&quot;conditionstatus&quot;,status);
//${__setProperty(globleconditionstatus,${conditionstatus})};
//${__setProperty(newstatus,${status},)}
props.setProperty(&quot;newstatus&quot;,status);
//${__setProperty(globleconditionstatus,${conditionstatus},)}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断前置条件是否正常完成" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.getProperty(&quot;newstatus&quot;)==&quot;成功&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取计划结果sql" enabled="true">
            <stringProp name="dataSource">testcenter</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from executeplan where id=${testplanid}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">planresult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取case-api的参数类型sql" enabled="true">
            <stringProp name="dataSource">testcenter</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select propertytype from api_params where apiid=${apiid}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">apiparamsprosult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取用例结果sql" enabled="true">
            <stringProp name="dataSource">testcenter</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from apicases where id=${caseid}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">caseresult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取用例数据结果sql" enabled="true">
            <stringProp name="dataSource">testcenter</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select * from api_casedata where caseid=${caseid}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">casedataresult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取api结果sql" enabled="true">
            <stringProp name="dataSource">testcenter</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select b.visittype,b.apistyle,b.path,b.requestcontenttype,b.responecontenttype from apicases a inner join api b on a.apiid=b.id where a.id=${caseid}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">apiresult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取被测服务器ip结果sql" enabled="true">
            <stringProp name="dataSource">testcenter</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select m.ip,a.domain,a.visittype from macdepunit a INNER JOIN apicases b INNER JOIN executeplan c JOIN machine m on a.depunitid=b.deployunitid and  a.envid=c.envid and  m.id=a.machineid where b.id=${caseid} and c.id=${testplanid}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">serveripresult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取发布单元结果sql" enabled="true">
            <stringProp name="dataSource">testcenter</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select b.protocal,b.port from apicases a inner join deployunit b on a.deployunitid=b.id where a.id=${caseid}</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable">deployunitresult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="获取run的参数" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util; 
 import com.alibaba.fastjson.JSON; 
 
 long startnums = new Date().getTime();
String starttime=String.valueOf(startnums);
props.setProperty(&quot;start&quot;,starttime);
log.error(&quot;===starttime-------------------------------------&quot;+starttime);


 String executeplanname=&quot;&quot;;
 if(vars.getObject(&quot;planresult&quot;).size()&gt;0)
 {
 	 executeplanname=vars.getObject(&quot;planresult&quot;).get(0).get(&quot;executeplanname&quot;);
 }

  props.setProperty(&quot;executeplanname&quot;,executeplanname);
 
log.error(&quot;===executeplanname-------------------------------------&quot;+executeplanname);

 String casename=&quot;&quot;;
 if(vars.getObject(&quot;caseresult&quot;).size()&gt;0)
 {
 	casename=vars.getObject(&quot;caseresult&quot;).get(0).get(&quot;casename&quot;);
 }
 props.setProperty(&quot;casename&quot;,casename);
 log.error(&quot;===casename-------------------------------------&quot;+casename);


 String expect=&quot;&quot;;
 if(vars.getObject(&quot;caseresult&quot;).size()&gt;0)
 {
 	expect=vars.getObject(&quot;caseresult&quot;).get(0).get(&quot;expect&quot;);
 }
 props.setProperty(&quot;expect&quot;,expect);
 log.error(&quot;===expect-------------------------------------&quot;+expect);

String requestcontenttype=&quot;&quot;;
 if(vars.getObject(&quot;apiresult&quot;).size()&gt;0)
 {
 	requestcontenttype=vars.getObject(&quot;apiresult&quot;).get(0).get(&quot;requestcontenttype&quot;);
 }
 props.setProperty(&quot;requestcontenttype&quot;,requestcontenttype);
 log.error(&quot;===requestcontenttype-------------------------------------&quot;+requestcontenttype);

String responecontenttype=&quot;&quot;;
 if(vars.getObject(&quot;apiresult&quot;).size()&gt;0)
 {  
 	responecontenttype=vars.getObject(&quot;apiresult&quot;).get(0).get(&quot;responecontenttype&quot;);
 }
 props.setProperty(&quot;responecontenttype&quot;,responecontenttype);
 log.error(&quot;===responecontenttype-------------------------------------&quot;+responecontenttype);

String method=&quot;&quot;;
 if(vars.getObject(&quot;apiresult&quot;).size()&gt;0)
 {
 	method=vars.getObject(&quot;apiresult&quot;).get(0).get(&quot;visittype&quot;);
 }
 props.setProperty(&quot;method&quot;,method);
 log.error(&quot;===method-------------------------------------&quot;+method);

String apistyle=&quot;&quot;;
 if(vars.getObject(&quot;apiresult&quot;).size()&gt;0)
 {
     apistyle=vars.getObject(&quot;apiresult&quot;).get(0).get(&quot;apistyle&quot;);
 }
 props.setProperty(&quot;apistyle&quot;,apistyle);
 log.error(&quot;===apistyle-------------------------------------&quot;+apistyle);


 String path=&quot;&quot;;
 if(vars.getObject(&quot;apiresult&quot;).size()&gt;0)
 {
     path=vars.getObject(&quot;apiresult&quot;).get(0).get(&quot;path&quot;);
 }
 if (!path.startsWith(&quot;/&quot;)) {
            path = &quot;/&quot; + path;
        }
 props.setProperty(&quot;path&quot;,path);
 log.error(&quot;===path-------------------------------------&quot;+path);

 

String protocal=&quot;&quot;;
 if(vars.getObject(&quot;deployunitresult&quot;).size()&gt;0)
 {
     protocal=vars.getObject(&quot;deployunitresult&quot;).get(0).get(&quot;protocal&quot;);
 }
 props.setProperty(&quot;protocal&quot;,protocal);
 log.error(&quot;===protocal-------------------------------------&quot;+protocal);


 

String port=&quot;&quot;;
 if(vars.getObject(&quot;deployunitresult&quot;).size()&gt;0)
 {
 	port=vars.getObject(&quot;deployunitresult&quot;).get(0).get(&quot;port&quot;);
 }
 props.setProperty(&quot;port&quot;,port);
 log.error(&quot;===port-------------------------------------&quot;+port);


 String deployunitvisittype=&quot;&quot;;
 String ip=&quot;&quot;;
 String domain=&quot;&quot;;
 if(vars.getObject(&quot;serveripresult&quot;).size()&gt;0)
 {
 	deployunitvisittype=vars.getObject(&quot;serveripresult&quot;).get(0).get(&quot;visittype&quot;);
 	ip=vars.getObject(&quot;serveripresult&quot;).get(0).get(&quot;ip&quot;);
 	domain=vars.getObject(&quot;serveripresult&quot;).get(0).get(&quot;domain&quot;);
 }
 props.setProperty(&quot;deployunitvisittype&quot;,deployunitvisittype);
 log.error(&quot;===deployunitvisittype-------------------------------------&quot;+deployunitvisittype);
 log.error(&quot;===ip-------------------------------------&quot;+ip);
 log.error(&quot;===domain-------------------------------------&quot;+domain);


 String testserver = &quot;&quot;;
 String resource = &quot;&quot;;
 if(deployunitvisittype.equals(new String(&quot;ip&quot;)))
 {
            testserver = ip;
            resource = protocal + &quot;://&quot; + testserver + &quot;:&quot; + port + path;
 }
 else
 {
            testserver= domain;
            resource = protocal + &quot;://&quot; + testserver  + path;
 }
 props.setProperty(&quot;resource&quot;,resource);  
 log.error(&quot;===resource-------------------------------------&quot;+resource);  

Map paramsmap = new HashMap();
Map headmap = new HashMap();
Map bodymap = new HashMap();
Map dubbomap = new HashMap();

 
   String paramjson=&quot;paramjson&quot;;
   String headjson=&quot;headjson&quot;;
   String bodyjson=&quot;bodyjson&quot;;
   String dubbojson=&quot;dubbojson&quot;;
   int casedatalistsize=vars.getObject(&quot;casedataresult&quot;).size();
   log.error(&quot;===casedatalistsize-------------------------------------&quot;+casedatalistsize);

   if(casedatalistsize&gt;0)
   {
   log.error(&quot;===00000000000000000000000000-------------------------------------&quot;);
   	for (int i=0; i&lt;1; i++)
   	{
	    String propertytype= vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;propertytype&quot;);
         log.error(&quot;===pppppppppppppppppppppppppppp-------------------------------------&quot;);
      // 获取Header，params，Body，Dubbo不同数据后，开始组装请求数据       
        if (propertytype.equals(new String(&quot;Params&quot;))) {
          String apiparam=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparam&quot;).trim();
           log.error(&quot;=Params==apiparam-------------------------------------&quot;+apiparam);
           String apiparamvalue=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparamvalue&quot;).trim();
            log.error(&quot;==Params=apiparamvalue-------------------------------------&quot;+apiparamvalue);
             paramsmap.put(apiparam, apiparamvalue);
            } 
       paramjson=JSON.toJSONString(paramsmap); 
       props.setProperty(&quot;paramjson&quot;,paramjson);
       log.error(&quot;==paramjson-------------------------------------&quot;+paramjson);

        if (propertytype.equals(new String(&quot;Header&quot;))) {
          String apiparam=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparam&quot;).trim();
           log.error(&quot;===Header---apiparam-------------------------------------&quot;+apiparam);
           String apiparamvalue=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparamvalue&quot;).trim();
            log.error(&quot;===Header---apiparamvalue-------------------------------------&quot;+apiparamvalue);
             headmap.put(apiparam, apiparamvalue);
            }
       headjson=JSON.toJSONString(headmap); 
       props.setProperty(&quot;headjson&quot;,headjson);
       log.error(&quot;==headjson-------------------------------------&quot;+headjson);

        if (propertytype.equals(new String(&quot;Body&quot;))) {
          String apiparam=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparam&quot;).trim();
           log.error(&quot;===Body---apiparam-------------------------------------&quot;+apiparam);
           String apiparamvalue=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparamvalue&quot;).trim();
            log.error(&quot;===Body---apiparamvalue-------------------------------------&quot;+apiparamvalue);
             bodymap.put(apiparam, apiparamvalue);
            }

       bodyjson=JSON.toJSONString(bodymap); 
       props.setProperty(&quot;bodyjson&quot;,bodyjson);
       log.error(&quot;==bodyjson-------------------------------------&quot;+bodyjson);

        if (propertytype.equals(new String(&quot;Dubbo&quot;))) {
          String apiparam=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparam&quot;).trim();
           log.error(&quot;===Dubbo---apiparam-------------------------------------&quot;+apiparam);
           String apiparamvalue=vars.getObject(&quot;casedataresult&quot;).get(i).get(&quot;apiparamvalue&quot;).trim();
            log.error(&quot;===Dubbo---apiparamvalue-------------------------------------&quot;+apiparamvalue);
             dubbomap.put(apiparam, apiparamvalue);
            }

       dubbojson=JSON.toJSONString(dubbomap); 
       props.setProperty(&quot;dubbojson&quot;,dubbojson);
       log.error(&quot;==dubbojson-------------------------------------&quot;+dubbojson);
   	}
   }	
   //}
   //else
   //{
   //遍历用例的api参数期望有对应的用例数据,如果没有表示遗漏用例参数数据
   	 int apiparamssize=vars.getObject(&quot;apiparamsprosult&quot;).size();
   	  log.error(&quot;===apiparamssize-------------------------------------&quot;+apiparamssize);
   	 for (int i=0;i&lt;apiparamssize;i++) {
         String Propery=vars.getObject(&quot;apiparamsprosult&quot;).get(i).get(&quot;propertytype&quot;);
   	  log.error(&quot;===Propery-------------------------------------&quot;+Propery);
	if (Propery.equals(new String(&quot;Params&quot;)))
	{
		if(paramjson==&quot;paramjson&quot;)
		{
			paramjson=&quot;nocasedatas&quot;;
			props.setProperty(&quot;paramjson&quot;,paramjson);
		}
	}
   	  log.error(&quot;===headjson-------------------------------------&quot;+headjson);
	if (Propery.equals(new String(&quot;Header&quot;)))
	{
		if(headjson==&quot;headjson&quot;)
		{
			headjson=&quot;nocasedatas&quot;;
			props.setProperty(&quot;headjson&quot;,headjson);
		}
	}
	   	  log.error(&quot;===paramjson-------------------------------------&quot;+paramjson);
	if (Propery.equals(new String(&quot;Body&quot;)))
	{
		if(bodyjson==&quot;bodyjson&quot;)
		{
			bodyjson=&quot;nocasedatas&quot;;
			props.setProperty(&quot;bodyjson&quot;,bodyjson);
		}	
	}
	if (Propery.equals(new String(&quot;Dubbo&quot;)))
	{
		if(dubbojson==&quot;dubbojson&quot;)
		{
			dubbojson=&quot;nocasedatas&quot;;
			props.setProperty(&quot;dubbojson&quot;,dubbojson);
		}
	}
         	   	
    }

  // }
   










</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="执行用例" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loops}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${thread}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1502182031000</longProp>
        <longProp name="ThreadGroup.end_time">1502182031000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断前置条件是否正常完成" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.getProperty(&quot;newstatus&quot;)==&quot;成功&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="${testclass}" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="testplanid" elementType="Argument">
                  <stringProp name="Argument.name">testplanid</stringProp>
                  <stringProp name="Argument.value">${testplanid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="caseid" elementType="Argument">
                  <stringProp name="Argument.name">caseid</stringProp>
                  <stringProp name="Argument.value">${caseid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="batchid" elementType="Argument">
                  <stringProp name="Argument.name">batchid</stringProp>
                  <stringProp name="Argument.value">${batchid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="slaverid" elementType="Argument">
                  <stringProp name="Argument.name">slaverid</stringProp>
                  <stringProp name="Argument.value">${slaverid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="batchname" elementType="Argument">
                  <stringProp name="Argument.name">batchname</stringProp>
                  <stringProp name="Argument.value">${batchname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="executeplanname" elementType="Argument">
                  <stringProp name="Argument.name">executeplanname</stringProp>
                  <stringProp name="Argument.value">${__property(executeplanname)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="casename" elementType="Argument">
                  <stringProp name="Argument.name">casename</stringProp>
                  <stringProp name="Argument.value">${__property(casename)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="expect" elementType="Argument">
                  <stringProp name="Argument.name">expect</stringProp>
                  <stringProp name="Argument.value">${__property(expect)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="protocal" elementType="Argument">
                  <stringProp name="Argument.name">protocal</stringProp>
                  <stringProp name="Argument.value">${__property(protocal)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RequestmMthod" elementType="Argument">
                  <stringProp name="Argument.name">RequestmMthod</stringProp>
                  <stringProp name="Argument.value">${__property(method)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="casetype" elementType="Argument">
                  <stringProp name="Argument.name">casetype</stringProp>
                  <stringProp name="Argument.value">${__property(casetype)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="resource" elementType="Argument">
                  <stringProp name="Argument.name">resource</stringProp>
                  <stringProp name="Argument.value">${__property(resource)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="apistyle" elementType="Argument">
                  <stringProp name="Argument.name">apistyle</stringProp>
                  <stringProp name="Argument.value">${__property(apistyle)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="requestcontenttype" elementType="Argument">
                  <stringProp name="Argument.name">requestcontenttype</stringProp>
                  <stringProp name="Argument.value">${__property(requestcontenttype)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="responecontenttype" elementType="Argument">
                  <stringProp name="Argument.name">responecontenttype</stringProp>
                  <stringProp name="Argument.value">${__property(responecontenttype)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="headjson" elementType="Argument">
                  <stringProp name="Argument.name">headjson</stringProp>
                  <stringProp name="Argument.value">${__property(headjson)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="paramsjson" elementType="Argument">
                  <stringProp name="Argument.name">paramsjson</stringProp>
                  <stringProp name="Argument.value">${__property(paramjson)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bodyjson" elementType="Argument">
                  <stringProp name="Argument.name">bodyjson</stringProp>
                  <stringProp name="Argument.value">${__property(bodyjson)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dubbojson" elementType="Argument">
                  <stringProp name="Argument.name">dubbojson</stringProp>
                  <stringProp name="Argument.value">${__property(dubbojson)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mysqlurl" elementType="Argument">
                  <stringProp name="Argument.name">mysqlurl</stringProp>
                  <stringProp name="Argument.value">${mysqlurl}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mysqlusername" elementType="Argument">
                  <stringProp name="Argument.name">mysqlusername</stringProp>
                  <stringProp name="Argument.value">${mysqlusername}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mysqlpassword" elementType="Argument">
                  <stringProp name="Argument.name">mysqlpassword</stringProp>
                  <stringProp name="Argument.value">${mysqlpassword}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">com.api.autotest.test.${testdeployunit}.${testclass}</stringProp>
          </JavaSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="后置条件线程" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="判断前置条件是否正常完成" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.getProperty(&quot;newstatus&quot;)==&quot;成功&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="处理后置条件" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="testplanid" elementType="Argument">
                  <stringProp name="Argument.name">testplanid</stringProp>
                  <stringProp name="Argument.value">${testplanid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="caseid" elementType="Argument">
                  <stringProp name="Argument.name">caseid</stringProp>
                  <stringProp name="Argument.value">${caseid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="batchid" elementType="Argument">
                  <stringProp name="Argument.name">batchid</stringProp>
                  <stringProp name="Argument.value">${batchid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="slaverid" elementType="Argument">
                  <stringProp name="Argument.name">slaverid</stringProp>
                  <stringProp name="Argument.value">${slaverid}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="batchname" elementType="Argument">
                  <stringProp name="Argument.name">batchname</stringProp>
                  <stringProp name="Argument.value">${batchname}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="casetype" elementType="Argument">
                  <stringProp name="Argument.name">casetype</stringProp>
                  <stringProp name="Argument.value">${__property(casetype)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="casereportfolder" elementType="Argument">
                  <stringProp name="Argument.name">casereportfolder</stringProp>
                  <stringProp name="Argument.value">${casereportfolder}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="testclass" elementType="Argument">
                  <stringProp name="Argument.name">testclass</stringProp>
                  <stringProp name="Argument.value">${testclass}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="start" elementType="Argument">
                  <stringProp name="Argument.name">start</stringProp>
                  <stringProp name="Argument.value">${__property(start)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mysqlurl" elementType="Argument">
                  <stringProp name="Argument.name">mysqlurl</stringProp>
                  <stringProp name="Argument.value">${mysqlurl}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mysqlusername" elementType="Argument">
                  <stringProp name="Argument.name">mysqlusername</stringProp>
                  <stringProp name="Argument.value">${mysqlusername}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="mysqlpassword" elementType="Argument">
                  <stringProp name="Argument.name">mysqlpassword</stringProp>
                  <stringProp name="Argument.value">${mysqlpassword}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">com.api.autotest.core.postcondition</stringProp>
          </JavaSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
